{% extends 'management/view/layout/base.njk' %} {% block body %} {% set category = data.category %}

<div class="level-left">
  <div class="level-item">
    <h1 class="title is-1">
      {{"Editing Category with ID: " + category.id if category.id else "New Category"}}
    </h1>
  </div>
  <div class="level-item">
    <span>
      <a class="button is-link is-light" href="/admin/category">Cancel</a>
    </span>
  </div>
</div>

<hr />

<form action="/admin/category/save" method="POST" >
  <input type="hidden" name="id" value="{{ category.id }}" readonly />

  <div class="field">
    <label class="label">Name</label>
    <div class="control has-icons-left">
      <input
        class="input"
        type="text"
        name="name"
        placeholder="Electronics"
        value="{{ category.name }}"
        required
      />
      <span class="icon is-small is-left">
        <i class="fas fa-user"></i>
      </span>
    </div>
  </div>

  <label class="label">Discounts</label>
  <div class="field">
    <div class="control">
      <input name='discounts' placeholder='discounts'/>
    </div>
  </div>

  <input type="submit" class="button is-success" value="Save changes" />

  <hr />
</form>
{% endblock %}

{% block footerScripts%}
  <script>
    const inputName = document.querySelector('input[name=name]');
    const placeholderValue = inputName.placeholder;

    inputName.addEventListener('input', checkName);

    function checkName(event) {
      inputName.classList.remove("is-danger");
      inputName.setAttribute("placeholder", placeholderValue);
      const categoryInputValue = event.target.value.toLowerCase();
      const categories = {{ categories | dump | safe }};
      const editCategory = {{ category | dump | safe }};
      
      categories.forEach((category) => {
        const categoryName = category.name.toLowerCase();
        if (!(editCategory.name === category.name)) {
          if (categoryName === categoryInputValue) {
            inputName.setAttribute("placeholder", `The category ${inputName.value} is already created!`);
            inputName.classList.add("is-danger");
            inputName.value = "";
          }
        }
      });
    }
  </script>

  <script>
    const currentDiscounts = {{ category.discounts | dump | safe }};
    const discounts = {{ discounts | dump | safe }};

    const cleanDiscounts = discounts.map(({ id, value, type }) => ({
      id,
      value: id,
      discountValue: value,
      type,
    }));
    const cleanCurrentDiscounts = currentDiscounts.map(({ id, value, type }) => ({
      id,
      value: id,
      discountValue: value,
      type,
    }));

    const input2 = document.querySelector('input[name=discounts]'),
      discountsTagify = new Tagify(input2, {
        enforceWhitelist: true,
        delimiters: null,
        templates: {
          tag: function (tagData) {
            const valueText =
              tagData.type === 'Fixed' ? `$${tagData.discountValue}` : (tagData.type ==="Percentage" ? `${tagData.discountValue}%` : `${tagData.discountValue}`);
            try {
              return `<tag title='${tagData.id}' contenteditable='false' spellcheck="false" class='tagify__tag ${tagData.class ? tagData.class : ''}' ${this.getAttributes(tagData)}>
                        <x title='remove tag' class='tagify__tag__removeBtn'></x>
                        <div>
                          <span class='tagify__tag-text'>${valueText} Off</span>
                        </div>
                      </tag>`;
            } catch (err) {}
          },

          dropdownItem: function (tagData) {
            const valueText =
              tagData.type === 'Fixed' ? `$${tagData.discountValue}` : (tagData.type ==="Percentage" ? `${tagData.discountValue}%` : `${tagData.discountValue}`);
            try {
              return `<div class='tagify__dropdown__item ${tagData.class ? tagData.class : ''}' tagifySuggestionIdx="${tagData.tagifySuggestionIdx}">
                        <span>${valueText} Off</span>
                      </div>`;
            } catch (err) {}
          },
        },
        whitelist: cleanDiscounts,
        dropdown: {
          enabled: 1,
          classname: 'extra-properties',
          searchKeys: ['value', 'type','discountValue'],
          maxItems: 100
        },
      });

    discountsTagify.addTags(cleanCurrentDiscounts);
  </script>
{% endblock %}
