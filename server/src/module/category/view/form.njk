{% extends 'management/view/layout/base.njk' %} {% block body %} {% set category = data.category %}

<div class="level-left">
  <div class="level-item">
    <h1 class="title is-1">
      {{"Editing Category with ID: " + category.id if category.id else "New Category"}}
    </h1>
  </div>
  <div class="level-item">
    <span>
      <a class="button is-link is-light" href="/admin/category">Cancel</a>
    </span>
  </div>
</div>

<hr />

<form action="/admin/category/save" method="POST" >
  <input type="hidden" name="id" value="{{ category.id }}" readonly />

  <div class="field">
    <label class="label">Name</label>
    <div class="control has-icons-left">
      <input
        class="input"
        type="text"
        name="name"
        placeholder="Electronics"
        value="{{ category.name }}"
        required
      />
      <span class="icon is-small is-left">
        <i class="fas fa-user"></i>
      </span>
    </div>
  </div>

  <label class="label">Discounts</label>
  <div class="field">
    <div class="control">
      <input name='discounts' placeholder='discounts'/>
    </div>
  </div>

  <input type="submit" class="button is-success" value="Save changes" />

  <hr />
</form>
{% endblock %}

{% block footerScripts%}
  <script>
    const currentDiscounts = {{ discounts | dump | safe }};
    const discounts = {{ discounts | dump | safe }};

    const cleanDiscounts = discounts.map((discount) => ({id: discount.id, value: discount.value, type: discount.type}))
      const cleanCurrentDiscounts = currentDiscounts.map((discount) => ({id: discount.id, value: discount.value, type: discount.type}))
        const input2 = document.querySelector('input[name=discounts]'),
          discountsTagify = new Tagify(input2, {
            enforceWhitelist: true,
            delimiters: null,
            templates: {
              tag: function (tagData) {
                try {
                  return `<tag title='${tagData.id}' contenteditable='false' spellcheck="false" class='tagify__tag ${tagData.class
                    ? tagData.class
                    : ""}' ${this.getAttributes(tagData)}>
                        <x title='remove tag' class='tagify__tag__removeBtn'></x>
                        <div>
                            <span class='tagify__tag-text'>${tagData.value}</span><span>${tagData.type}</span>
                        </div>
                    </tag>`
                } catch (err) {}
              },

              dropdownItem: function (tagData) {
                const valueText = tagData.type === 'Fixed' ? `$${tagData.value}` : `${tagData.value}%`
                try {
                  return `<div class='tagify__dropdown__item ${tagData.class
                    ? tagData.class
                    : ""}' tagifySuggestionIdx="${tagData.tagifySuggestionIdx}">
                            <span>${valueText} Off</span>
                        </div>`
                } catch (err) {}
              }
            },
            whitelist: cleanDiscounts,
            dropdown: {
              enabled: 1, // suggest tags after a single character input
              classname: 'extra-properties' // custom class for the suggestions dropdown
            } // map tags' values to this property name, so this property will be the actual value and not the printed value on the screen
          });

        tagify.addTags(cleanCurrentDiscounts);
  </script>
{% endblock %}
